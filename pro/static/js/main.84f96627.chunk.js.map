{"version":3,"sources":["scripts/index.js","scripts/views/index.js","scripts/reducers/data.js","scripts/reducers/user.js","scripts/reducers/index.js","scripts/store.js","App.js","serviceWorker.js","index.js","utils/lazyload.js"],"names":["MainRouter","store","basename","component","MainLayout","Component","history","this","props","location","className","path","exact","render","to","LazyLoad","childContextTypes","PropTypes","object","defaultState","immutable","fromJS","banner","count","city","goodList","goodType","FList","FType","goodsList","goodsDetail","searchList","pic","mobile","token","sessionStorage","reducers","combineReducers","data","state","action","console","log","type","update","x","payload","set","user","obj","toJS","createStore","applyMiddleware","thunk","promise","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","loader","loading","Loadable"],"mappings":"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","file":"static/js/main.84f96627.chunk.js","sourcesContent":["/* eslint-disable */\r\n// import React, {Component} from \"react\";\r\n\r\nimport { HashRouter as Hash, Route, Switch } from \"react-router-dom\";\r\n\r\nimport MainLayout from \"./views\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nexport class MainRouter extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<Hash basename=\"\">\r\n\t\t\t\t\t<Route component={MainLayout}></Route>\r\n\t\t\t\t</Hash>\r\n\t\t\t</Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// export function MainRouter(){\r\n//     return (\r\n//         <Hash\r\n//             basename=\"\"\r\n//         >\r\n//             <Route component={MainLayout} ></Route>\r\n//         </Hash>\r\n//     )\r\n// }\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport LazyLoad from \"&/lazyload\";\r\nimport PropTypes from \"prop-types\";\r\n// import Guide from \"./guide\";\r\n// import Login from \"./login\";\r\n\r\n// 所有的路由  在这里配置\r\nexport default class MainLayout extends Component {\r\n\tgetChildContext() {\r\n\t\treturn {\r\n\t\t\thistory: this.props.history,\r\n\t\t\tlocation: this.props.location\r\n\t\t};\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"main\">\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/\" exact render={() => <Redirect to=\"/guide\" />} />\r\n\t\t\t\t\t<Route path=\"/guide\" component={LazyLoad(() => import(\"./guide\"))} />\r\n\t\t\t\t\t<Route path=\"/main\" component={LazyLoad(() => import(\"./main\"))} />\r\n\t\t\t\t\t<Route path=\"/login\" component={LazyLoad(() => import(\"./login\"))} />\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tpath=\"/goodsList\"\r\n\t\t\t\t\t\tcomponent={LazyLoad(() => import(\"./goodsList\"))}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tpath=\"/search\"\r\n\t\t\t\t\t\tcomponent={LazyLoad(() => import(\"./search\"))}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Route path=\"/scan\" component={LazyLoad(() => import(\"./scan\"))} />\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tpath=\"/detail/:goodId\"\r\n\t\t\t\t\t\tcomponent={LazyLoad(() => import(\"./detail\"))}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Route render={() => <Redirect to=\"/guide\" />} />\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nMainLayout.childContextTypes = {\r\n\thistory: PropTypes.object,\r\n\tlocation: PropTypes.object\r\n};\r\n","import immutable from \"immutable\";\r\nconst defaultState = immutable.fromJS({\r\n\tbanner: [],\r\n\tcount: 2020,\r\n\tcity: \"美丽的中国\",\r\n\tgoodList: [],\r\n\tgoodType: [],\r\n\tFList: [],\r\n\tFType: [],\r\n\tgoodsList: [],\r\n\tgoodsDetail: [],\r\n\tsearchList: []\r\n});\r\nexport const data = (state = defaultState, action) => {\r\n\tconsole.log(action);\r\n\tswitch (action.type) {\r\n\t\tcase \"changeCount\":\r\n\t\t\treturn state.update(\"count\", x => x + action.payload);\r\n\t\tcase \"changeCity\":\r\n\t\t\treturn state.set(\"city\", action.payload);\r\n\t\tcase \"getBanner\":\r\n\t\t\treturn state.set(\"banner\", action.payload);\r\n\t\tcase \"getGoodList\":\r\n\t\t\treturn state.set(\"goodList\", action.payload);\r\n\t\tcase \"getGoodType\":\r\n\t\t\treturn state.set(\"goodType\", action.payload);\r\n\t\tcase \"getFList\":\r\n\t\t\treturn state.set(\"FList\", action.payload);\r\n\t\tcase \"getFType\":\r\n\t\t\treturn state.set(\"FType\", action.payload);\r\n\t\tcase \"getGoodsList\":\r\n\t\t\treturn state.set(\"goodsList\", action.payload);\r\n\t\tcase \"getGoodsDetail\":\r\n\t\t\treturn state.set(\"goodsDetail\", action.payload);\r\n\t\tcase \"getSearchList\":\r\n\t\t\treturn state.set(\"searchList\", action.payload);\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import immutable from \"immutable\";\r\nconst defaultState = immutable.fromJS({\r\n\tpic: null,\r\n\tmobile: \"\",\r\n\ttoken: sessionStorage.token\r\n});\r\nexport const user = (state = defaultState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"changeUser\":\r\n\t\t\tvar obj = { ...state.toJS(), ...action.payload };\r\n\t\t\treturn immutable.fromJS(obj);\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { combineReducers } from \"redux-immutable\";\r\nimport { data } from \"./data\";\r\nimport { user } from \"./user\";\r\n\r\nexport const reducers = combineReducers({\r\n\tdata: data,\r\n\tuser: user\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport promise from \"redux-promise\";\r\nimport { reducers } from \"./reducers\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk, promise));\r\nexport default store;\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport {MainRouter} from \"~\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"@/styles/index.scss\"; // 引入 公共主样式\n\n// import \"~/redux\";\n// import \"~/react-redux\"\n// import \"~/immutable\"\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(\"this  is  main.js wh1910\");\n","\r\n\r\n// 路由懒加载 \r\nimport React from \"react\";\r\nimport Loadable from \"react-loadable\"\r\n// import {Toast} from \"antd-mobile\"\r\n\r\n// 通用的 loading组件 \r\nconst loadingComponent = () =>{\r\n    // Toast.loading('Loading...', 1, () => {\r\n    //     console.log('Load complete !!!');\r\n    // });\r\n    return (<div>loading</div>)  \r\n}\r\n\r\n\r\n//   loading组件  通用的 如果传入 loading  有动画 \r\nexport default (loader,loading=loadingComponent)=>{\r\n    return Loadable({\r\n        loader,     // 需要懒加载的组件 \r\n        loading\r\n    })\r\n}"],"sourceRoot":""}